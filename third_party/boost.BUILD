# Description:
#   Boost C++ Library

package(default_visibility = ["//visibility:public"])

licenses(["notice"])  # Boost Software License

exports_files(["LICENSE_1_0.txt"])

cc_library(
    name = "boost",
    srcs = [
        "boost/algorithm/string.hpp",
        "boost/algorithm/string/case_conv.hpp",
        "boost/algorithm/string/classification.hpp",
        "boost/algorithm/string/compare.hpp",
        "boost/algorithm/string/concept.hpp",
        "boost/algorithm/string/config.hpp",
        "boost/algorithm/string/constants.hpp",
        "boost/algorithm/string/detail/case_conv.hpp",
        "boost/algorithm/string/detail/classification.hpp",
        "boost/algorithm/string/detail/find_format.hpp",
        "boost/algorithm/string/detail/find_format_all.hpp",
        "boost/algorithm/string/detail/find_format_store.hpp",
        "boost/algorithm/string/detail/find_iterator.hpp",
        "boost/algorithm/string/detail/finder.hpp",
        "boost/algorithm/string/detail/formatter.hpp",
        "boost/algorithm/string/detail/predicate.hpp",
        "boost/algorithm/string/detail/replace_storage.hpp",
        "boost/algorithm/string/detail/sequence.hpp",
        "boost/algorithm/string/detail/trim.hpp",
        "boost/algorithm/string/detail/util.hpp",
        "boost/algorithm/string/erase.hpp",
        "boost/algorithm/string/find.hpp",
        "boost/algorithm/string/find_format.hpp",
        "boost/algorithm/string/find_iterator.hpp",
        "boost/algorithm/string/finder.hpp",
        "boost/algorithm/string/formatter.hpp",
        "boost/algorithm/string/iter_find.hpp",
        "boost/algorithm/string/join.hpp",
        "boost/algorithm/string/predicate.hpp",
        "boost/algorithm/string/predicate_facade.hpp",
        "boost/algorithm/string/replace.hpp",
        "boost/algorithm/string/sequence_traits.hpp",
        "boost/algorithm/string/split.hpp",
        "boost/algorithm/string/std/list_traits.hpp",
        "boost/algorithm/string/std/slist_traits.hpp",
        "boost/algorithm/string/std/string_traits.hpp",
        "boost/algorithm/string/std_containers_traits.hpp",
        "boost/algorithm/string/trim.hpp",
        "boost/algorithm/string/yes_no_type.hpp",
        "boost/assert.hpp",
        "boost/bind/mem_fn.hpp",
        "boost/bind/mem_fn_cc.hpp",
        "boost/bind/mem_fn_template.hpp",
        "boost/checked_delete.hpp",
        "boost/concept/assert.hpp",
        "boost/concept/detail/backward_compatibility.hpp",
        "boost/concept/detail/concept_def.hpp",
        "boost/concept/detail/concept_undef.hpp",
        "boost/concept/detail/general.hpp",
        "boost/concept/detail/has_constraints.hpp",
        "boost/concept/usage.hpp",
        "boost/concept_check.hpp",
        "boost/config.hpp",
        "boost/config/auto_link.hpp",
        "boost/config/compiler/clang.hpp",
        "boost/config/compiler/gcc.hpp",
        "boost/config/detail/posix_features.hpp",
        "boost/config/detail/select_compiler_config.hpp",
        "boost/config/detail/select_platform_config.hpp",
        "boost/config/detail/select_stdlib_config.hpp",
        "boost/config/detail/suffix.hpp",
        "boost/config/helper_macros.hpp",
        "boost/config/no_tr1/cmath.hpp",
        "boost/config/no_tr1/functional.hpp",
        "boost/config/no_tr1/memory.hpp",
        "boost/config/platform/linux.hpp",
        "boost/config/platform/macos.hpp",
        "boost/config/stdlib/libcpp.hpp",
        "boost/config/stdlib/libstdcpp3.hpp",
        "boost/config/user.hpp",
        "boost/config/workaround.hpp",
        "boost/container_hash/detail/float_functions.hpp",
        "boost/container_hash/detail/hash_float.hpp",
        "boost/container_hash/detail/limits.hpp",
        "boost/container_hash/extensions.hpp",
        "boost/container_hash/hash.hpp",
        "boost/container_hash/hash_fwd.hpp",
        "boost/core/addressof.hpp",
        "boost/core/checked_delete.hpp",
        "boost/core/demangle.hpp",
        "boost/core/enable_if.hpp",
        "boost/core/no_exceptions_support.hpp",
        "boost/core/noncopyable.hpp",
        "boost/core/ref.hpp",
        "boost/core/typeinfo.hpp",
        "boost/cregex.hpp",
        "boost/cstdint.hpp",
        "boost/current_function.hpp",
        "boost/detail/container_fwd.hpp",
        "boost/detail/indirect_traits.hpp",
        "boost/detail/iterator.hpp",
        "boost/detail/no_exceptions_support.hpp",
        "boost/detail/sp_typeinfo.hpp",
        "boost/detail/workaround.hpp",
        "boost/exception/exception.hpp",
        "boost/function.hpp",
        "boost/function/detail/function_iterate.hpp",
        "boost/function/detail/maybe_include.hpp",
        "boost/function/detail/prologue.hpp",
        "boost/function/function_base.hpp",
        "boost/function/function_fwd.hpp",
        "boost/function/function_template.hpp",
        "boost/function_equal.hpp",
        "boost/functional/hash.hpp",
        "boost/get_pointer.hpp",
        "boost/integer.hpp",
        "boost/integer/static_log2.hpp",
        "boost/integer_fwd.hpp",
        "boost/integer_traits.hpp",
        "boost/iterator/advance.hpp",
        "boost/iterator/detail/config_def.hpp",
        "boost/iterator/detail/config_undef.hpp",
        "boost/iterator/detail/enable_if.hpp",
        "boost/iterator/detail/facade_iterator_category.hpp",
        "boost/iterator/interoperable.hpp",
        "boost/iterator/iterator_adaptor.hpp",
        "boost/iterator/iterator_categories.hpp",
        "boost/iterator/iterator_concepts.hpp",
        "boost/iterator/iterator_facade.hpp",
        "boost/iterator/iterator_traits.hpp",
        "boost/iterator/reverse_iterator.hpp",
        "boost/iterator/transform_iterator.hpp",
        "boost/limits.hpp",
        "boost/mem_fn.hpp",
        "boost/move/core.hpp",
        "boost/move/detail/config_begin.hpp",
        "boost/move/detail/config_end.hpp",
        "boost/move/detail/meta_utils.hpp",
        "boost/move/detail/meta_utils_core.hpp",
        "boost/move/detail/workaround.hpp",
        "boost/move/utility_core.hpp",
        "boost/mpl/always.hpp",
        "boost/mpl/and.hpp",
        "boost/mpl/apply.hpp",
        "boost/mpl/apply_fwd.hpp",
        "boost/mpl/apply_wrap.hpp",
        "boost/mpl/arg.hpp",
        "boost/mpl/arg_fwd.hpp",
        "boost/mpl/assert.hpp",
        "boost/mpl/aux_/adl_barrier.hpp",
        "boost/mpl/aux_/arg_typedef.hpp",
        "boost/mpl/aux_/arithmetic_op.hpp",
        "boost/mpl/aux_/arity.hpp",
        "boost/mpl/aux_/arity_spec.hpp",
        "boost/mpl/aux_/common_name_wknd.hpp",
        "boost/mpl/aux_/comparison_op.hpp",
        "boost/mpl/aux_/config/adl.hpp",
        "boost/mpl/aux_/config/arrays.hpp",
        "boost/mpl/aux_/config/bcc.hpp",
        "boost/mpl/aux_/config/bind.hpp",
        "boost/mpl/aux_/config/compiler.hpp",
        "boost/mpl/aux_/config/ctps.hpp",
        "boost/mpl/aux_/config/dtp.hpp",
        "boost/mpl/aux_/config/eti.hpp",
        "boost/mpl/aux_/config/forwarding.hpp",
        "boost/mpl/aux_/config/gcc.hpp",
        "boost/mpl/aux_/config/gpu.hpp",
        "boost/mpl/aux_/config/has_apply.hpp",
        "boost/mpl/aux_/config/has_xxx.hpp",
        "boost/mpl/aux_/config/integral.hpp",
        "boost/mpl/aux_/config/intel.hpp",
        "boost/mpl/aux_/config/lambda.hpp",
        "boost/mpl/aux_/config/msvc.hpp",
        "boost/mpl/aux_/config/msvc_typename.hpp",
        "boost/mpl/aux_/config/nttp.hpp",
        "boost/mpl/aux_/config/overload_resolution.hpp",
        "boost/mpl/aux_/config/pp_counter.hpp",
        "boost/mpl/aux_/config/preprocessor.hpp",
        "boost/mpl/aux_/config/static_constant.hpp",
        "boost/mpl/aux_/config/ttp.hpp",
        "boost/mpl/aux_/config/use_preprocessed.hpp",
        "boost/mpl/aux_/config/workaround.hpp",
        "boost/mpl/aux_/full_lambda.hpp",
        "boost/mpl/aux_/has_apply.hpp",
        "boost/mpl/aux_/has_tag.hpp",
        "boost/mpl/aux_/has_type.hpp",
        "boost/mpl/aux_/include_preprocessed.hpp",
        "boost/mpl/aux_/integral_wrapper.hpp",
        "boost/mpl/aux_/is_msvc_eti_arg.hpp",
        "boost/mpl/aux_/lambda_arity_param.hpp",
        "boost/mpl/aux_/lambda_support.hpp",
        "boost/mpl/aux_/largest_int.hpp",
        "boost/mpl/aux_/msvc_eti_base.hpp",
        "boost/mpl/aux_/msvc_never_true.hpp",
        "boost/mpl/aux_/na.hpp",
        "boost/mpl/aux_/na_assert.hpp",
        "boost/mpl/aux_/na_fwd.hpp",
        "boost/mpl/aux_/na_spec.hpp",
        "boost/mpl/aux_/nested_type_wknd.hpp",
        "boost/mpl/aux_/nttp_decl.hpp",
        "boost/mpl/aux_/numeric_cast_utils.hpp",
        "boost/mpl/aux_/numeric_op.hpp",
        "boost/mpl/aux_/preprocessed/gcc/and.hpp",
        "boost/mpl/aux_/preprocessed/gcc/apply.hpp",
        "boost/mpl/aux_/preprocessed/gcc/apply_fwd.hpp",
        "boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp",
        "boost/mpl/aux_/preprocessed/gcc/arg.hpp",
        "boost/mpl/aux_/preprocessed/gcc/bind.hpp",
        "boost/mpl/aux_/preprocessed/gcc/bind_fwd.hpp",
        "boost/mpl/aux_/preprocessed/gcc/equal_to.hpp",
        "boost/mpl/aux_/preprocessed/gcc/full_lambda.hpp",
        "boost/mpl/aux_/preprocessed/gcc/less.hpp",
        "boost/mpl/aux_/preprocessed/gcc/or.hpp",
        "boost/mpl/aux_/preprocessed/gcc/placeholders.hpp",
        "boost/mpl/aux_/preprocessed/gcc/quote.hpp",
        "boost/mpl/aux_/preprocessed/gcc/template_arity.hpp",
        "boost/mpl/aux_/preprocessed/gcc/times.hpp",
        "boost/mpl/aux_/preprocessor/def_params_tail.hpp",
        "boost/mpl/aux_/preprocessor/default_params.hpp",
        "boost/mpl/aux_/preprocessor/enum.hpp",
        "boost/mpl/aux_/preprocessor/params.hpp",
        "boost/mpl/aux_/static_cast.hpp",
        "boost/mpl/aux_/template_arity.hpp",
        "boost/mpl/aux_/template_arity_fwd.hpp",
        "boost/mpl/aux_/type_wrapper.hpp",
        "boost/mpl/aux_/value_wknd.hpp",
        "boost/mpl/aux_/yes_no.hpp",
        "boost/mpl/bind.hpp",
        "boost/mpl/bind_fwd.hpp",
        "boost/mpl/bool.hpp",
        "boost/mpl/bool_fwd.hpp",
        "boost/mpl/equal_to.hpp",
        "boost/mpl/eval_if.hpp",
        "boost/mpl/has_xxx.hpp",
        "boost/mpl/identity.hpp",
        "boost/mpl/if.hpp",
        "boost/mpl/int.hpp",
        "boost/mpl/int_fwd.hpp",
        "boost/mpl/integral_c.hpp",
        "boost/mpl/integral_c_fwd.hpp",
        "boost/mpl/integral_c_tag.hpp",
        "boost/mpl/lambda.hpp",
        "boost/mpl/lambda_fwd.hpp",
        "boost/mpl/less.hpp",
        "boost/mpl/limits/arity.hpp",
        "boost/mpl/logical.hpp",
        "boost/mpl/multiplies.hpp",
        "boost/mpl/next.hpp",
        "boost/mpl/next_prior.hpp",
        "boost/mpl/not.hpp",
        "boost/mpl/numeric_cast.hpp",
        "boost/mpl/or.hpp",
        "boost/mpl/placeholders.hpp",
        "boost/mpl/protect.hpp",
        "boost/mpl/quote.hpp",
        "boost/mpl/tag.hpp",
        "boost/mpl/times.hpp",
        "boost/mpl/void.hpp",
        "boost/mpl/void_fwd.hpp",
        "boost/next_prior.hpp",
        "boost/numeric/conversion/bounds.hpp",
        "boost/numeric/conversion/cast.hpp",
        "boost/numeric/conversion/conversion_traits.hpp",
        "boost/numeric/conversion/converter.hpp",
        "boost/numeric/conversion/converter_policies.hpp",
        "boost/numeric/conversion/detail/bounds.hpp",
        "boost/numeric/conversion/detail/conversion_traits.hpp",
        "boost/numeric/conversion/detail/converter.hpp",
        "boost/numeric/conversion/detail/int_float_mixture.hpp",
        "boost/numeric/conversion/detail/is_subranged.hpp",
        "boost/numeric/conversion/detail/meta.hpp",
        "boost/numeric/conversion/detail/numeric_cast_traits.hpp",
        "boost/numeric/conversion/detail/preprocessed/numeric_cast_traits_common.hpp",
        "boost/numeric/conversion/detail/preprocessed/numeric_cast_traits_long_long.hpp",
        "boost/numeric/conversion/detail/sign_mixture.hpp",
        "boost/numeric/conversion/detail/udt_builtin_mixture.hpp",
        "boost/numeric/conversion/int_float_mixture_enum.hpp",
        "boost/numeric/conversion/numeric_cast_traits.hpp",
        "boost/numeric/conversion/sign_mixture_enum.hpp",
        "boost/numeric/conversion/udt_builtin_mixture_enum.hpp",
        "boost/predef.h",
        "boost/predef/architecture.h",
        "boost/predef/architecture/alpha.h",
        "boost/predef/architecture/arm.h",
        "boost/predef/architecture/blackfin.h",
        "boost/predef/architecture/convex.h",
        "boost/predef/architecture/ia64.h",
        "boost/predef/architecture/m68k.h",
        "boost/predef/architecture/mips.h",
        "boost/predef/architecture/parisc.h",
        "boost/predef/architecture/ppc.h",
        "boost/predef/architecture/pyramid.h",
        "boost/predef/architecture/rs6k.h",
        "boost/predef/architecture/sparc.h",
        "boost/predef/architecture/superh.h",
        "boost/predef/architecture/sys370.h",
        "boost/predef/architecture/sys390.h",
        "boost/predef/architecture/x86.h",
        "boost/predef/architecture/x86/32.h",
        "boost/predef/architecture/x86/64.h",
        "boost/predef/architecture/z.h",
        "boost/predef/compiler.h",
        "boost/predef/compiler/borland.h",
        "boost/predef/compiler/clang.h",
        "boost/predef/compiler/comeau.h",
        "boost/predef/compiler/compaq.h",
        "boost/predef/compiler/diab.h",
        "boost/predef/compiler/digitalmars.h",
        "boost/predef/compiler/dignus.h",
        "boost/predef/compiler/edg.h",
        "boost/predef/compiler/ekopath.h",
        "boost/predef/compiler/gcc.h",
        "boost/predef/compiler/gcc_xml.h",
        "boost/predef/compiler/greenhills.h",
        "boost/predef/compiler/hp_acc.h",
        "boost/predef/compiler/iar.h",
        "boost/predef/compiler/ibm.h",
        "boost/predef/compiler/intel.h",
        "boost/predef/compiler/kai.h",
        "boost/predef/compiler/llvm.h",
        "boost/predef/compiler/metaware.h",
        "boost/predef/compiler/metrowerks.h",
        "boost/predef/compiler/microtec.h",
        "boost/predef/compiler/mpw.h",
        "boost/predef/compiler/palm.h",
        "boost/predef/compiler/pgi.h",
        "boost/predef/compiler/sgi_mipspro.h",
        "boost/predef/compiler/sunpro.h",
        "boost/predef/compiler/tendra.h",
        "boost/predef/compiler/visualc.h",
        "boost/predef/compiler/watcom.h",
        "boost/predef/detail/_cassert.h",
        "boost/predef/detail/_exception.h",
        "boost/predef/detail/comp_detected.h",
        "boost/predef/detail/os_detected.h",
        "boost/predef/detail/test.h",
        "boost/predef/hardware.h",
        "boost/predef/hardware/simd.h",
        "boost/predef/hardware/simd/arm.h",
        "boost/predef/hardware/simd/arm/versions.h",
        "boost/predef/hardware/simd/ppc.h",
        "boost/predef/hardware/simd/ppc/versions.h",
        "boost/predef/hardware/simd/x86.h",
        "boost/predef/hardware/simd/x86/versions.h",
        "boost/predef/hardware/simd/x86_amd.h",
        "boost/predef/hardware/simd/x86_amd/versions.h",
        "boost/predef/language.h",
        "boost/predef/language/objc.h",
        "boost/predef/language/stdc.h",
        "boost/predef/language/stdcpp.h",
        "boost/predef/library.h",
        "boost/predef/library/c.h",
        "boost/predef/library/c/_prefix.h",
        "boost/predef/library/c/cloudabi.h",
        "boost/predef/library/c/gnu.h",
        "boost/predef/library/c/uc.h",
        "boost/predef/library/c/vms.h",
        "boost/predef/library/c/zos.h",
        "boost/predef/library/std.h",
        "boost/predef/library/std/_prefix.h",
        "boost/predef/library/std/cxx.h",
        "boost/predef/library/std/dinkumware.h",
        "boost/predef/library/std/libcomo.h",
        "boost/predef/library/std/modena.h",
        "boost/predef/library/std/msl.h",
        "boost/predef/library/std/roguewave.h",
        "boost/predef/library/std/sgi.h",
        "boost/predef/library/std/stdcpp3.h",
        "boost/predef/library/std/stlport.h",
        "boost/predef/library/std/vacpp.h",
        "boost/predef/make.h",
        "boost/predef/os.h",
        "boost/predef/os/aix.h",
        "boost/predef/os/amigaos.h",
        "boost/predef/os/android.h",
        "boost/predef/os/beos.h",
        "boost/predef/os/bsd.h",
        "boost/predef/os/bsd/bsdi.h",
        "boost/predef/os/bsd/dragonfly.h",
        "boost/predef/os/bsd/free.h",
        "boost/predef/os/bsd/net.h",
        "boost/predef/os/bsd/open.h",
        "boost/predef/os/cygwin.h",
        "boost/predef/os/haiku.h",
        "boost/predef/os/hpux.h",
        "boost/predef/os/ios.h",
        "boost/predef/os/irix.h",
        "boost/predef/os/linux.h",
        "boost/predef/os/macos.h",
        "boost/predef/os/os400.h",
        "boost/predef/os/qnxnto.h",
        "boost/predef/os/solaris.h",
        "boost/predef/os/unix.h",
        "boost/predef/os/vms.h",
        "boost/predef/os/windows.h",
        "boost/predef/other.h",
        "boost/predef/other/endian.h",
        "boost/predef/platform.h",
        "boost/predef/platform/cloudabi.h",
        "boost/predef/platform/ios.h",
        "boost/predef/platform/mingw.h",
        "boost/predef/platform/mingw32.h",
        "boost/predef/platform/mingw64.h",
        "boost/predef/platform/windows_desktop.h",
        "boost/predef/platform/windows_phone.h",
        "boost/predef/platform/windows_runtime.h",
        "boost/predef/platform/windows_server.h",
        "boost/predef/platform/windows_store.h",
        "boost/predef/platform/windows_system.h",
        "boost/predef/platform/windows_uwp.h",
        "boost/predef/version.h",
        "boost/predef/version_number.h",
        "boost/preprocessor/arithmetic/add.hpp",
        "boost/preprocessor/arithmetic/dec.hpp",
        "boost/preprocessor/arithmetic/detail/div_base.hpp",
        "boost/preprocessor/arithmetic/inc.hpp",
        "boost/preprocessor/arithmetic/mod.hpp",
        "boost/preprocessor/arithmetic/sub.hpp",
        "boost/preprocessor/array/data.hpp",
        "boost/preprocessor/array/elem.hpp",
        "boost/preprocessor/array/size.hpp",
        "boost/preprocessor/cat.hpp",
        "boost/preprocessor/comma_if.hpp",
        "boost/preprocessor/comparison/less_equal.hpp",
        "boost/preprocessor/config/config.hpp",
        "boost/preprocessor/control/deduce_d.hpp",
        "boost/preprocessor/control/detail/while.hpp",
        "boost/preprocessor/control/expr_iif.hpp",
        "boost/preprocessor/control/if.hpp",
        "boost/preprocessor/control/iif.hpp",
        "boost/preprocessor/control/while.hpp",
        "boost/preprocessor/debug/error.hpp",
        "boost/preprocessor/detail/auto_rec.hpp",
        "boost/preprocessor/detail/check.hpp",
        "boost/preprocessor/detail/is_binary.hpp",
        "boost/preprocessor/empty.hpp",
        "boost/preprocessor/enum.hpp",
        "boost/preprocessor/enum_params.hpp",
        "boost/preprocessor/facilities/empty.hpp",
        "boost/preprocessor/facilities/expand.hpp",
        "boost/preprocessor/facilities/identity.hpp",
        "boost/preprocessor/facilities/intercept.hpp",
        "boost/preprocessor/facilities/overload.hpp",
        "boost/preprocessor/identity.hpp",
        "boost/preprocessor/inc.hpp",
        "boost/preprocessor/iterate.hpp",
        "boost/preprocessor/iteration/detail/bounds/lower1.hpp",
        "boost/preprocessor/iteration/detail/bounds/upper1.hpp",
        "boost/preprocessor/iteration/detail/iter/forward1.hpp",
        "boost/preprocessor/iteration/iterate.hpp",
        "boost/preprocessor/list/adt.hpp",
        "boost/preprocessor/list/detail/fold_left.hpp",
        "boost/preprocessor/list/detail/fold_right.hpp",
        "boost/preprocessor/list/fold_left.hpp",
        "boost/preprocessor/list/fold_right.hpp",
        "boost/preprocessor/list/reverse.hpp",
        "boost/preprocessor/logical/and.hpp",
        "boost/preprocessor/logical/bitand.hpp",
        "boost/preprocessor/logical/bool.hpp",
        "boost/preprocessor/logical/compl.hpp",
        "boost/preprocessor/logical/not.hpp",
        "boost/preprocessor/punctuation/comma.hpp",
        "boost/preprocessor/punctuation/comma_if.hpp",
        "boost/preprocessor/repeat.hpp",
        "boost/preprocessor/repetition/detail/for.hpp",
        "boost/preprocessor/repetition/enum.hpp",
        "boost/preprocessor/repetition/enum_binary_params.hpp",
        "boost/preprocessor/repetition/enum_params.hpp",
        "boost/preprocessor/repetition/enum_shifted_params.hpp",
        "boost/preprocessor/repetition/enum_trailing_params.hpp",
        "boost/preprocessor/repetition/for.hpp",
        "boost/preprocessor/repetition/repeat.hpp",
        "boost/preprocessor/repetition/repeat_from_to.hpp",
        "boost/preprocessor/seq/cat.hpp",
        "boost/preprocessor/seq/detail/is_empty.hpp",
        "boost/preprocessor/seq/elem.hpp",
        "boost/preprocessor/seq/enum.hpp",
        "boost/preprocessor/seq/fold_left.hpp",
        "boost/preprocessor/seq/for_each_i.hpp",
        "boost/preprocessor/seq/seq.hpp",
        "boost/preprocessor/seq/size.hpp",
        "boost/preprocessor/seq/transform.hpp",
        "boost/preprocessor/slot/detail/def.hpp",
        "boost/preprocessor/slot/detail/shared.hpp",
        "boost/preprocessor/slot/slot.hpp",
        "boost/preprocessor/stringize.hpp",
        "boost/preprocessor/tuple/detail/is_single_return.hpp",
        "boost/preprocessor/tuple/eat.hpp",
        "boost/preprocessor/tuple/elem.hpp",
        "boost/preprocessor/tuple/rem.hpp",
        "boost/preprocessor/variadic/elem.hpp",
        "boost/preprocessor/variadic/size.hpp",
        "boost/range/algorithm/equal.hpp",
        "boost/range/as_literal.hpp",
        "boost/range/begin.hpp",
        "boost/range/concepts.hpp",
        "boost/range/config.hpp",
        "boost/range/const_iterator.hpp",
        "boost/range/detail/common.hpp",
        "boost/range/detail/extract_optional_type.hpp",
        "boost/range/detail/has_member_size.hpp",
        "boost/range/detail/implementation_help.hpp",
        "boost/range/detail/misc_concept.hpp",
        "boost/range/detail/msvc_has_iterator_workaround.hpp",
        "boost/range/detail/safe_bool.hpp",
        "boost/range/detail/sfinae.hpp",
        "boost/range/detail/str_types.hpp",
        "boost/range/difference_type.hpp",
        "boost/range/distance.hpp",
        "boost/range/empty.hpp",
        "boost/range/end.hpp",
        "boost/range/functions.hpp",
        "boost/range/has_range_iterator.hpp",
        "boost/range/iterator.hpp",
        "boost/range/iterator_range.hpp",
        "boost/range/iterator_range_core.hpp",
        "boost/range/iterator_range_io.hpp",
        "boost/range/mutable_iterator.hpp",
        "boost/range/range_fwd.hpp",
        "boost/range/rbegin.hpp",
        "boost/range/rend.hpp",
        "boost/range/reverse_iterator.hpp",
        "boost/range/size.hpp",
        "boost/range/size_type.hpp",
        "boost/range/value_type.hpp",
        "boost/ref.hpp",
        "boost/regex.hpp",
        "boost/regex/config.hpp",
        "boost/regex/config/cwchar.hpp",
        "boost/regex/pattern_except.hpp",
        "boost/regex/pending/object_cache.hpp",
        "boost/regex/pending/static_mutex.hpp",
        "boost/regex/regex_traits.hpp",
        "boost/regex/user.hpp",
        "boost/regex/v4/basic_regex.hpp",
        "boost/regex/v4/basic_regex_creator.hpp",
        "boost/regex/v4/basic_regex_parser.hpp",
        "boost/regex/v4/c_regex_traits.hpp",
        "boost/regex/v4/char_regex_traits.hpp",
        "boost/regex/v4/cpp_regex_traits.hpp",
        "boost/regex/v4/cregex.hpp",
        "boost/regex/v4/error_type.hpp",
        "boost/regex/v4/fileiter.hpp",
        "boost/regex/v4/instances.hpp",
        "boost/regex/v4/iterator_category.hpp",
        "boost/regex/v4/iterator_traits.hpp",
        "boost/regex/v4/match_flags.hpp",
        "boost/regex/v4/match_results.hpp",
        "boost/regex/v4/mem_block_cache.hpp",
        "boost/regex/v4/perl_matcher.hpp",
        "boost/regex/v4/perl_matcher_common.hpp",
        "boost/regex/v4/perl_matcher_non_recursive.hpp",
        "boost/regex/v4/primary_transform.hpp",
        "boost/regex/v4/protected_call.hpp",
        "boost/regex/v4/regbase.hpp",
        "boost/regex/v4/regex.hpp",
        "boost/regex/v4/regex_format.hpp",
        "boost/regex/v4/regex_fwd.hpp",
        "boost/regex/v4/regex_grep.hpp",
        "boost/regex/v4/regex_iterator.hpp",
        "boost/regex/v4/regex_match.hpp",
        "boost/regex/v4/regex_merge.hpp",
        "boost/regex/v4/regex_raw_buffer.hpp",
        "boost/regex/v4/regex_replace.hpp",
        "boost/regex/v4/regex_search.hpp",
        "boost/regex/v4/regex_split.hpp",
        "boost/regex/v4/regex_token_iterator.hpp",
        "boost/regex/v4/regex_traits.hpp",
        "boost/regex/v4/regex_traits_defaults.hpp",
        "boost/regex/v4/regex_workaround.hpp",
        "boost/regex/v4/states.hpp",
        "boost/regex/v4/sub_match.hpp",
        "boost/regex/v4/syntax_type.hpp",
        "boost/regex_fwd.hpp",
        "boost/scoped_array.hpp",
        "boost/scoped_ptr.hpp",
        "boost/shared_ptr.hpp",
        "boost/smart_ptr/bad_weak_ptr.hpp",
        "boost/smart_ptr/detail/local_counted_base.hpp",
        "boost/smart_ptr/detail/local_sp_deleter.hpp",
        "boost/smart_ptr/detail/operator_bool.hpp",
        "boost/smart_ptr/detail/shared_count.hpp",
        "boost/smart_ptr/detail/sp_convertible.hpp",
        "boost/smart_ptr/detail/sp_counted_base.hpp",
        "boost/smart_ptr/detail/sp_counted_base_clang.hpp",
        "boost/smart_ptr/detail/sp_counted_base_std_atomic.hpp",
        "boost/smart_ptr/detail/sp_counted_impl.hpp",
        "boost/smart_ptr/detail/sp_disable_deprecated.hpp",
        "boost/smart_ptr/detail/sp_has_sync.hpp",
        "boost/smart_ptr/detail/sp_noexcept.hpp",
        "boost/smart_ptr/detail/sp_nullptr_t.hpp",
        "boost/smart_ptr/detail/spinlock.hpp",
        "boost/smart_ptr/detail/spinlock_pool.hpp",
        "boost/smart_ptr/detail/spinlock_std_atomic.hpp",
        "boost/smart_ptr/detail/yield_k.hpp",
        "boost/smart_ptr/scoped_array.hpp",
        "boost/smart_ptr/scoped_ptr.hpp",
        "boost/smart_ptr/shared_ptr.hpp",
        "boost/static_assert.hpp",
        "boost/throw_exception.hpp",
        "boost/type.hpp",
        "boost/type_index.hpp",
        "boost/type_index/stl_type_index.hpp",
        "boost/type_index/type_index_facade.hpp",
        "boost/type_traits/add_const.hpp",
        "boost/type_traits/add_lvalue_reference.hpp",
        "boost/type_traits/add_pointer.hpp",
        "boost/type_traits/add_reference.hpp",
        "boost/type_traits/add_rvalue_reference.hpp",
        "boost/type_traits/add_volatile.hpp",
        "boost/type_traits/alignment_of.hpp",
        "boost/type_traits/composite_traits.hpp",
        "boost/type_traits/conditional.hpp",
        "boost/type_traits/conversion_traits.hpp",
        "boost/type_traits/declval.hpp",
        "boost/type_traits/detail/config.hpp",
        "boost/type_traits/detail/has_binary_operator.hpp",
        "boost/type_traits/detail/is_function_ptr_helper.hpp",
        "boost/type_traits/detail/is_likely_lambda.hpp",
        "boost/type_traits/detail/is_mem_fun_pointer_impl.hpp",
        "boost/type_traits/detail/yes_no_type.hpp",
        "boost/type_traits/function_traits.hpp",
        "boost/type_traits/has_minus.hpp",
        "boost/type_traits/has_minus_assign.hpp",
        "boost/type_traits/has_plus.hpp",
        "boost/type_traits/has_plus_assign.hpp",
        "boost/type_traits/has_trivial_copy.hpp",
        "boost/type_traits/has_trivial_destructor.hpp",
        "boost/type_traits/integral_constant.hpp",
        "boost/type_traits/intrinsics.hpp",
        "boost/type_traits/is_abstract.hpp",
        "boost/type_traits/is_arithmetic.hpp",
        "boost/type_traits/is_array.hpp",
        "boost/type_traits/is_base_and_derived.hpp",
        "boost/type_traits/is_base_of.hpp",
        "boost/type_traits/is_class.hpp",
        "boost/type_traits/is_complete.hpp",
        "boost/type_traits/is_const.hpp",
        "boost/type_traits/is_constructible.hpp",
        "boost/type_traits/is_convertible.hpp",
        "boost/type_traits/is_copy_constructible.hpp",
        "boost/type_traits/is_default_constructible.hpp",
        "boost/type_traits/is_destructible.hpp",
        "boost/type_traits/is_enum.hpp",
        "boost/type_traits/is_floating_point.hpp",
        "boost/type_traits/is_function.hpp",
        "boost/type_traits/is_fundamental.hpp",
        "boost/type_traits/is_integral.hpp",
        "boost/type_traits/is_lvalue_reference.hpp",
        "boost/type_traits/is_member_function_pointer.hpp",
        "boost/type_traits/is_member_pointer.hpp",
        "boost/type_traits/is_pod.hpp",
        "boost/type_traits/is_pointer.hpp",
        "boost/type_traits/is_reference.hpp",
        "boost/type_traits/is_rvalue_reference.hpp",
        "boost/type_traits/is_same.hpp",
        "boost/type_traits/is_scalar.hpp",
        "boost/type_traits/is_signed.hpp",
        "boost/type_traits/is_union.hpp",
        "boost/type_traits/is_unsigned.hpp",
        "boost/type_traits/is_void.hpp",
        "boost/type_traits/is_volatile.hpp",
        "boost/type_traits/make_unsigned.hpp",
        "boost/type_traits/make_void.hpp",
        "boost/type_traits/remove_const.hpp",
        "boost/type_traits/remove_cv.hpp",
        "boost/type_traits/remove_pointer.hpp",
        "boost/type_traits/remove_reference.hpp",
        "boost/type_traits/type_identity.hpp",
        "boost/utility.hpp",
        "boost/utility/addressof.hpp",
        "boost/utility/base_from_member.hpp",
        "boost/utility/binary.hpp",
        "boost/utility/detail/result_of_iterate.hpp",
        "boost/utility/enable_if.hpp",
        "boost/utility/identity_type.hpp",
        "boost/utility/result_of.hpp",
        "boost/version.hpp",
        "libs/regex/src/c_regex_traits.cpp",
        "libs/regex/src/cpp_regex_traits.cpp",
        "libs/regex/src/cregex.cpp",
        "libs/regex/src/fileiter.cpp",
        "libs/regex/src/icu.cpp",
        "libs/regex/src/instances.cpp",
        "libs/regex/src/internals.hpp",
        "libs/regex/src/posix_api.cpp",
        "libs/regex/src/regex.cpp",
        "libs/regex/src/regex_debug.cpp",
        "libs/regex/src/regex_raw_buffer.cpp",
        "libs/regex/src/regex_traits_defaults.cpp",
        "libs/regex/src/static_mutex.cpp",
        "libs/regex/src/usinstances.cpp",
        "libs/regex/src/w32_regex_traits.cpp",
        "libs/regex/src/wc_regex_traits.cpp",
        "libs/regex/src/wide_posix_api.cpp",
        "libs/regex/src/winstances.cpp",
    ],
    copts = [
        "-D_GLIBCXX_USE_CXX11_ABI=0",
    ],
    includes = [
        ".",
    ],
)
