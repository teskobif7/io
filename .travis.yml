dist: xenial
sudo: required
language: minimal

git:
  quiet: true

addons:
  apt:
    update: true
    packages:
    - python3-pip

services:
- docker

stages:
- build
- python
- r
- nightly

install:
- pip3 install twine
- twine --version

before_script:
- bash -x tensorflow_io/kafka/python/kernel_tests/kafka_test.sh start kafka
- bash -x tensorflow_io/kinesis/python/kernel_tests/kinesis_test.sh start kinesis
- bash -x tensorflow_io/ignite/python/tests/start_ignite.sh

jobs:
  include:
  - stage: build
    name: "Python 2.7 Build"
    script:
    - export PYTHON_VERSION=2.7 BUILD_IMAGE=tensorflow/tensorflow:custom-op
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
    - |
      if [[ ( ${TRAVIS_BRANCH} == "master" ) && ( ${TRAVIS_EVENT_TYPE} != "pull_request" ) ]]; then
        ls -la artifacts/
        twine upload --repository-url https://test.pypi.org/legacy/ artifacts/*.whl
      fi
  - stage: build
    name: "Python 3.4 Build"
    script:
    - export PYTHON_VERSION=3.4 BUILD_IMAGE=tensorflow/tensorflow:custom-op
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
    - |
      if [[ ( ${TRAVIS_BRANCH} == "master" ) && ( ${TRAVIS_EVENT_TYPE} != "pull_request" ) ]]; then
        ls -la artifacts/
        twine upload --repository-url https://test.pypi.org/legacy/ artifacts/*.whl
      fi
  - stage: build
    name: "Python 3.5 Build"
    script:
    - export PYTHON_VERSION=3.5 BUILD_IMAGE=tensorflow/tensorflow:custom-op
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
    - |
      if [[ ( ${TRAVIS_BRANCH} == "master" ) && ( ${TRAVIS_EVENT_TYPE} != "pull_request" ) ]]; then
        ls -la artifacts/
        twine upload --repository-url https://test.pypi.org/legacy/ artifacts/*.whl
      fi
  - stage: build
    name: "Python 3.6 Build"
    script:
    - export PYTHON_VERSION=3.6 BUILD_IMAGE=tensorflow/tensorflow:custom-op
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
    - |
      if [[ ( ${TRAVIS_BRANCH} == "master" ) && ( ${TRAVIS_EVENT_TYPE} != "pull_request" ) ]]; then
        ls -la artifacts/
        twine upload --repository-url https://test.pypi.org/legacy/ artifacts/*.whl
      fi
  - stage: build
    name: "Python 2.7 Build (Ubuntu 16.04)"
    script:
    - export PYTHON_VERSION=2.7 BUILD_IMAGE=ubuntu:16.04
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
  - stage: build
    name: "Python 3.5 Build (Ubuntu 16.04)"
    script:
    - export PYTHON_VERSION=3.5 BUILD_IMAGE=ubuntu:16.04
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
  - stage: build
    name: "Python 2.7 Build (Ubuntu 18.04)"
    script:
    - export PYTHON_VERSION=2.7 BUILD_IMAGE=ubuntu:18.04
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
  - stage: build
    name: "Python 3.6 Build (Ubuntu 18.04)"
    script:
    - export PYTHON_VERSION=3.6 BUILD_IMAGE=ubuntu:18.04
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
  - stage: python
    name: "Python 2.7 Test (Ubuntu 16.04)"
    script:
    - export PYTHON_VERSION=2.7 TEST_IMAGE=ubuntu:16.04 BUILD_IMAGE=tensorflow/tensorflow:custom-op
    - export TENSORFLOW_IO_VERSION=0.3.0.dev${TRAVIS_BUILD_NUMBER}
    - |
      if [[ ( ${TRAVIS_BRANCH} == "master" ) && ( ${TRAVIS_EVENT_TYPE} != "pull_request" ) ]]; then
        docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir python:${PYTHON_VERSION} pip download --index-url https://test.pypi.org/simple/ tensorflow-io-nightly==${TENSORFLOW_IO_VERSION} --no-deps -d artifacts/
      else
        docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
      fi
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${TEST_IMAGE} bash -x /working_dir/.travis/python.test.sh ${PYTHON_VERSION}
  - stage: python
    name: "Python 3.5 Test (Ubuntu 16.04)"
    script:
    - export PYTHON_VERSION=3.5 TEST_IMAGE=ubuntu:16.04 BUILD_IMAGE=tensorflow/tensorflow:custom-op
    - export TENSORFLOW_IO_VERSION=0.3.0.dev${TRAVIS_BUILD_NUMBER}
    - |
      if [[ ( ${TRAVIS_BRANCH} == "master" ) && ( ${TRAVIS_EVENT_TYPE} != "pull_request" ) ]]; then
        docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir python:${PYTHON_VERSION} pip download --index-url https://test.pypi.org/simple/ tensorflow-io-nightly==${TENSORFLOW_IO_VERSION} --no-deps -d artifacts/
      else
        docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
      fi
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${TEST_IMAGE} bash -x /working_dir/.travis/python.test.sh ${PYTHON_VERSION}
  - stage: python
    name: "Python 2.7 Test (Ubuntu 18.04)"
    script:
    - export PYTHON_VERSION=2.7 TEST_IMAGE=ubuntu:18.04 BUILD_IMAGE=tensorflow/tensorflow:custom-op
    - export TENSORFLOW_IO_VERSION=0.3.0.dev${TRAVIS_BUILD_NUMBER}
    - |
      if [[ ( ${TRAVIS_BRANCH} == "master" ) && ( ${TRAVIS_EVENT_TYPE} != "pull_request" ) ]]; then
        docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir python:${PYTHON_VERSION} pip download --index-url https://test.pypi.org/simple/ tensorflow-io-nightly==${TENSORFLOW_IO_VERSION} --no-deps -d artifacts/
      else
        docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
      fi
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${TEST_IMAGE} bash -x /working_dir/.travis/python.test.sh ${PYTHON_VERSION}
  - stage: python
    name: "Python 3.6 Test (Ubuntu 18.04)"
    script:
    - export PYTHON_VERSION=3.6 TEST_IMAGE=ubuntu:18.04 BUILD_IMAGE=tensorflow/tensorflow:custom-op
    - export TENSORFLOW_IO_VERSION=0.3.0.dev${TRAVIS_BUILD_NUMBER}
    - |
      if [[ ( ${TRAVIS_BRANCH} == "master" ) && ( ${TRAVIS_EVENT_TYPE} != "pull_request" ) ]]; then
        docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir python:${PYTHON_VERSION} pip download --index-url https://test.pypi.org/simple/ tensorflow-io-nightly==${TENSORFLOW_IO_VERSION} --no-deps -d artifacts/
      else
        docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
      fi
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${TEST_IMAGE} bash -x /working_dir/.travis/python.test.sh ${PYTHON_VERSION}
  - stage: r
    name: "R Test (Ubuntu 16.04 Python 2.7)"
    script:
    - export PYTHON_VERSION=2.7 TEST_R_IMAGE=ubuntu:16.04 BUILD_IMAGE=tensorflow/tensorflow:custom-op
    - export TENSORFLOW_IO_VERSION=0.3.0.dev${TRAVIS_BUILD_NUMBER}
    - |
      if [[ ( ${TRAVIS_BRANCH} == "master" ) && ( ${TRAVIS_EVENT_TYPE} != "pull_request" ) ]]; then
        docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir python:${PYTHON_VERSION} pip download --index-url https://test.pypi.org/simple/ tensorflow-io-nightly==${TENSORFLOW_IO_VERSION} --no-deps -d artifacts/
      else
        docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
      fi
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${TEST_R_IMAGE} bash -x /working_dir/.travis/r.test.sh ${PYTHON_VERSION}
  - stage: r
    name: "R Test (Ubuntu 18.04 Python 2.7)"
    script:
    - export PYTHON_VERSION=2.7 TEST_R_IMAGE=ubuntu:18.04 BUILD_IMAGE=tensorflow/tensorflow:custom-op
    - export TENSORFLOW_IO_VERSION=0.3.0.dev${TRAVIS_BUILD_NUMBER}
    - |
      if [[ ( ${TRAVIS_BRANCH} == "master" ) && ( ${TRAVIS_EVENT_TYPE} != "pull_request" ) ]]; then
        docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir python:${PYTHON_VERSION} pip download --index-url https://test.pypi.org/simple/ tensorflow-io-nightly==${TENSORFLOW_IO_VERSION} --no-deps -d artifacts/
      else
        docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${BUILD_IMAGE} bash -x /working_dir/.travis/python.release.sh ${PYTHON_VERSION} tensorflow==1.12.0 --nightly ${TRAVIS_BUILD_NUMBER}
      fi
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir --net=host ${TEST_R_IMAGE} bash -x /working_dir/.travis/r.test.sh ${PYTHON_VERSION}
  - stage: nightly
    name: "Nightly Release"
    if: branch = master AND type != pull_request
    script:
    - export TENSORFLOW_IO_VERSION=0.3.0.dev${TRAVIS_BUILD_NUMBER}
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir python:2.7 pip download --index-url https://test.pypi.org/simple/ tensorflow-io-nightly==${TENSORFLOW_IO_VERSION} --no-deps -d artifacts/
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir python:3.4 pip download --index-url https://test.pypi.org/simple/ tensorflow-io-nightly==${TENSORFLOW_IO_VERSION} --no-deps -d artifacts/
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir python:3.5 pip download --index-url https://test.pypi.org/simple/ tensorflow-io-nightly==${TENSORFLOW_IO_VERSION} --no-deps -d artifacts/
    - docker run -i -t --rm -v ${PWD}:/working_dir -w /working_dir python:3.6 pip download --index-url https://test.pypi.org/simple/ tensorflow-io-nightly==${TENSORFLOW_IO_VERSION} --no-deps -d artifacts/
    - ls -la artifacts/
    - twine upload artifacts/*.whl

-notifications:
-  email: false
